// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/service/blacklist.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "Anti-bruteforce-service/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBlackListStore is a mock of BlackListStore interface.
type MockBlackListStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlackListStoreMockRecorder
}

// MockBlackListStoreMockRecorder is the mock recorder for MockBlackListStore.
type MockBlackListStoreMockRecorder struct {
	mock *MockBlackListStore
}

// NewMockBlackListStore creates a new mock instance.
func NewMockBlackListStore(ctrl *gomock.Controller) *MockBlackListStore {
	mock := &MockBlackListStore{ctrl: ctrl}
	mock.recorder = &MockBlackListStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlackListStore) EXPECT() *MockBlackListStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBlackListStore) Add(prefix, mask string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", prefix, mask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBlackListStoreMockRecorder) Add(prefix, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBlackListStore)(nil).Add), prefix, mask)
}

// Get mocks base method.
func (m *MockBlackListStore) Get() ([]entity.IpNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]entity.IpNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlackListStoreMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlackListStore)(nil).Get))
}

// Remove mocks base method.
func (m *MockBlackListStore) Remove(prefix, mask string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", prefix, mask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockBlackListStoreMockRecorder) Remove(prefix, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBlackListStore)(nil).Remove), prefix, mask)
}
