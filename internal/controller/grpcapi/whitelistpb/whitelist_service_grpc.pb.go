// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: whitelist_service.proto

package whitelistpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WhiteListServiceClient is the client API for WhiteListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhiteListServiceClient interface {
	AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error)
	RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error)
	GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (WhiteListService_GetIpListClient, error)
}

type whiteListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhiteListServiceClient(cc grpc.ClientConnInterface) WhiteListServiceClient {
	return &whiteListServiceClient{cc}
}

func (c *whiteListServiceClient) AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error) {
	out := new(AddIpResponse)
	err := c.cc.Invoke(ctx, "/whitelist.WhiteListService/AddIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListServiceClient) RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error) {
	out := new(RemoveIPResponse)
	err := c.cc.Invoke(ctx, "/whitelist.WhiteListService/RemoveIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whiteListServiceClient) GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (WhiteListService_GetIpListClient, error) {
	stream, err := c.cc.NewStream(ctx, &WhiteListService_ServiceDesc.Streams[0], "/whitelist.WhiteListService/GetIpList", opts...)
	if err != nil {
		return nil, err
	}
	x := &whiteListServiceGetIpListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WhiteListService_GetIpListClient interface {
	Recv() (*GetIpListResponse, error)
	grpc.ClientStream
}

type whiteListServiceGetIpListClient struct {
	grpc.ClientStream
}

func (x *whiteListServiceGetIpListClient) Recv() (*GetIpListResponse, error) {
	m := new(GetIpListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WhiteListServiceServer is the server API for WhiteListService service.
// All implementations must embed UnimplementedWhiteListServiceServer
// for forward compatibility
type WhiteListServiceServer interface {
	AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error)
	RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error)
	GetIpList(*GetIpListRequest, WhiteListService_GetIpListServer) error
	mustEmbedUnimplementedWhiteListServiceServer()
}

// UnimplementedWhiteListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWhiteListServiceServer struct {
}

func (UnimplementedWhiteListServiceServer) AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIp not implemented")
}
func (UnimplementedWhiteListServiceServer) RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIp not implemented")
}
func (UnimplementedWhiteListServiceServer) GetIpList(*GetIpListRequest, WhiteListService_GetIpListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIpList not implemented")
}
func (UnimplementedWhiteListServiceServer) mustEmbedUnimplementedWhiteListServiceServer() {}

// UnsafeWhiteListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhiteListServiceServer will
// result in compilation errors.
type UnsafeWhiteListServiceServer interface {
	mustEmbedUnimplementedWhiteListServiceServer()
}

func RegisterWhiteListServiceServer(s grpc.ServiceRegistrar, srv WhiteListServiceServer) {
	s.RegisterService(&WhiteListService_ServiceDesc, srv)
}

func _WhiteListService_AddIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServiceServer).AddIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whitelist.WhiteListService/AddIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServiceServer).AddIp(ctx, req.(*AddIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteListService_RemoveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServiceServer).RemoveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whitelist.WhiteListService/RemoveIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServiceServer).RemoveIp(ctx, req.(*RemoveIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WhiteListService_GetIpList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIpListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WhiteListServiceServer).GetIpList(m, &whiteListServiceGetIpListServer{stream})
}

type WhiteListService_GetIpListServer interface {
	Send(*GetIpListResponse) error
	grpc.ServerStream
}

type whiteListServiceGetIpListServer struct {
	grpc.ServerStream
}

func (x *whiteListServiceGetIpListServer) Send(m *GetIpListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WhiteListService_ServiceDesc is the grpc.ServiceDesc for WhiteListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhiteListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whitelist.WhiteListService",
	HandlerType: (*WhiteListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIp",
			Handler:    _WhiteListService_AddIp_Handler,
		},
		{
			MethodName: "RemoveIp",
			Handler:    _WhiteListService_RemoveIp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIpList",
			Handler:       _WhiteListService_GetIpList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "whitelist_service.proto",
}
