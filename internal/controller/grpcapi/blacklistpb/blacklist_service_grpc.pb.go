// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: blacklist_service.proto

package blacklistpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlackListServiceClient is the client API for BlackListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackListServiceClient interface {
	AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error)
	RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error)
	GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (BlackListService_GetIpListClient, error)
}

type blackListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackListServiceClient(cc grpc.ClientConnInterface) BlackListServiceClient {
	return &blackListServiceClient{cc}
}

func (c *blackListServiceClient) AddIp(ctx context.Context, in *AddIpRequest, opts ...grpc.CallOption) (*AddIpResponse, error) {
	out := new(AddIpResponse)
	err := c.cc.Invoke(ctx, "/blacklist.BlackListService/AddIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListServiceClient) RemoveIp(ctx context.Context, in *RemoveIPRequest, opts ...grpc.CallOption) (*RemoveIPResponse, error) {
	out := new(RemoveIPResponse)
	err := c.cc.Invoke(ctx, "/blacklist.BlackListService/RemoveIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackListServiceClient) GetIpList(ctx context.Context, in *GetIpListRequest, opts ...grpc.CallOption) (BlackListService_GetIpListClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlackListService_ServiceDesc.Streams[0], "/blacklist.BlackListService/GetIpList", opts...)
	if err != nil {
		return nil, err
	}
	x := &blackListServiceGetIpListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlackListService_GetIpListClient interface {
	Recv() (*GetIpListResponse, error)
	grpc.ClientStream
}

type blackListServiceGetIpListClient struct {
	grpc.ClientStream
}

func (x *blackListServiceGetIpListClient) Recv() (*GetIpListResponse, error) {
	m := new(GetIpListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlackListServiceServer is the server API for BlackListService service.
// All implementations must embed UnimplementedBlackListServiceServer
// for forward compatibility
type BlackListServiceServer interface {
	AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error)
	RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error)
	GetIpList(*GetIpListRequest, BlackListService_GetIpListServer) error
	mustEmbedUnimplementedBlackListServiceServer()
}

// UnimplementedBlackListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlackListServiceServer struct {
}

func (UnimplementedBlackListServiceServer) AddIp(context.Context, *AddIpRequest) (*AddIpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIp not implemented")
}
func (UnimplementedBlackListServiceServer) RemoveIp(context.Context, *RemoveIPRequest) (*RemoveIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIp not implemented")
}
func (UnimplementedBlackListServiceServer) GetIpList(*GetIpListRequest, BlackListService_GetIpListServer) error {
	return status.Errorf(codes.Unimplemented, "method GetIpList not implemented")
}
func (UnimplementedBlackListServiceServer) mustEmbedUnimplementedBlackListServiceServer() {}

// UnsafeBlackListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackListServiceServer will
// result in compilation errors.
type UnsafeBlackListServiceServer interface {
	mustEmbedUnimplementedBlackListServiceServer()
}

func RegisterBlackListServiceServer(s grpc.ServiceRegistrar, srv BlackListServiceServer) {
	s.RegisterService(&BlackListService_ServiceDesc, srv)
}

func _BlackListService_AddIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServiceServer).AddIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blacklist.BlackListService/AddIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServiceServer).AddIp(ctx, req.(*AddIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackListService_RemoveIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackListServiceServer).RemoveIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blacklist.BlackListService/RemoveIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackListServiceServer).RemoveIp(ctx, req.(*RemoveIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlackListService_GetIpList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIpListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlackListServiceServer).GetIpList(m, &blackListServiceGetIpListServer{stream})
}

type BlackListService_GetIpListServer interface {
	Send(*GetIpListResponse) error
	grpc.ServerStream
}

type blackListServiceGetIpListServer struct {
	grpc.ServerStream
}

func (x *blackListServiceGetIpListServer) Send(m *GetIpListResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BlackListService_ServiceDesc is the grpc.ServiceDesc for BlackListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlackListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blacklist.BlackListService",
	HandlerType: (*BlackListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIp",
			Handler:    _BlackListService_AddIp_Handler,
		},
		{
			MethodName: "RemoveIp",
			Handler:    _BlackListService_RemoveIp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetIpList",
			Handler:       _BlackListService_GetIpList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blacklist_service.proto",
}
